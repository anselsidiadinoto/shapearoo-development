// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "generated_enums.ts"
}

// generator client {
//   provider = "prisma-client-js"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  User_general  User_general[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User_general {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String
  name            String
  user_id         User              @relation(fields: [userId], references: [id])
  userId          String
  DeliveryAddress DeliveryAddress[]
}

model DeliveryAddress {
  id      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id User_general @relation(fields: [user_generalId], references: [id])

  first_name     String?
  last_name      String?
  address_line_1 String?
  address_line_2 String?
  address_city   String?
  address_state  String?
  address_zip    String?

  user_generalId String @db.Uuid
}
